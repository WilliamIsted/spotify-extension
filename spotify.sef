[extension_name]
Spotify Extension
[extension_info]
Spotify Extension for SAMMI which allows you to control Spotify from SAMMI
[extension_version]
2.0.0
[insert_external]
<!-- HTML interface for the extension -->
<div>
    <h1>Spotify Extension</h1>
    <p>Authored by: <a href="https://www.github.com/jspaulsen">jspaulsen</a></p>
    <p>Source Code: <a href="https://github.com/jspaulsen/spotify-extension">GitHub</a></p>
    <p>Control Spotify from SAMMI</p>
</div>


[insert_command]
SAMMI.extCommand(
    'Spotify Refresh Token', 
    3355443, 
    52,
    {},
    sendAsExtensionTrigger = false,
    false
);

SAMMI.extCommand(
    'Spotify Set Refresh Token',
    3355443,
    52,
    {
        refresh_token: ['Refresh Token', 14, '']
    },
    sendAsExtensionTrigger = false,
    false
);

SAMMI.extCommand(
    'Spotify Set Client ID',
    3355443,
    52,
    {
        client_id: ['Client ID', 14, '']
    },
    sendAsExtensionTrigger = false,
    false
);

SAMMI.extCommand(
    'Spotify Get Client ID',
    3355443,
    52,
    {
        client_id: ['Save in Variable', 14, '']
    },
    sendAsExtensionTrigger = false,
    false
);

SAMMI.extCommand(
    'Spotify Skip Song',
    3355443,
    52,
    {},
    sendAsExtensionTrigger = false,
    false
);

SAMMI.extCommand(
    'Spotify Pause Song',
    3355443,
    52,
    {},
    sendAsExtensionTrigger = false,
    false
);

SAMMI.extCommand(
    'Spotify Resume Song',
    3355443,
    52,
    {},
    sendAsExtensionTrigger = false,
    false
);

// Spotify Next Song, vaariable that returns song name
SAMMI.extCommand(
    'Spotify Get Queue',
    3355443,
    52,
    {
        trackInfo: ['Save in Variable', 14, '']
    },
    sendAsExtensionTrigger = false,
    false
);

SAMMI.extCommand(
    'Spotify Current Song',
    3355443,
    52,
    {
        trackInfo: ['Save in Variable', 14, '']
    },
    sendAsExtensionTrigger = false,
    false
);

SAMMI.extCommand(
    'Spotify Lookup Song',
    3355443,
    52,
    {
        query: ['Song Lookup Query', 14, 'November Rain by Guns N Roses'],
        trackInfo: ['Save in Variable', 14, '']
    },
    sendAsExtensionTrigger = false,
    false
);

SAMMI.extCommand(
    'Spotify Add Song',
    3355443,
    52,
    {
        query: ['Song', 14, ''],
        trackInfo: ['Save in Variable', 14, '']
    },
    sendAsExtensionTrigger = false,
    false
);

SAMMI.extCommand(
    'Spotify Set Volume',
    3355443,
    52,
    {
        volume: ['Volume', 14, '100']
    },
    sendAsExtensionTrigger = false,
    false
);


// Call the main function when the extension loads
(async () => {
    await main();
})();


[insert_script]
async function fetchR(url, payload) {
    const response = await fetch(url, payload);

    if (response.status === 401) {
        const newAccessToken = await refreshTokenIntegration();

        console.log(`Token expired, refreshing token for ${url}`);

        if (!newAccessToken) {
            console.error(`Failed to refresh token for ${url}`);
            return;
        }

        payload.headers['Authorization'] = `Bearer ${newAccessToken}`;
        return await fetch(url, payload);
    }

    return response;
}


function trackToSammiTrack(track) {
    const images = {
        small: track.album.images[0].url,
        medium: track.album.images[1].url,
        large: track.album.images[2].url,
    };

    return {
        name: track.name,
        artist: track.artists.map(artist => artist.name).join(', '),
        album: track.album.name,
        image: track.album.images[0].url,
        images,
        uri: track.uri,
        href: track.href,
    };
}

async function loadSpotifyToken() {
    const refresh_token = await SAMMI.loadIni(
        'spotify.ini',
        'credentials',
        'refresh_token',
    );

    if (!refresh_token || refresh_token.Value === '') {
        SAMMI.alert('No refresh token found');
        console.error('No refresh token found');
        return;
    }

    return refresh_token.Value;
}

async function saveSpotifyClientId(client_id) {
    await SAMMI.saveIni(
        'spotify.ini',
        'credentials',
        'client_id',
        client_id,
    );
}

async function loadSpotifyClientId() {
    const client_id = await SAMMI.loadIni(
        'spotify.ini',
        'credentials',
        'client_id',
    );

    if (!client_id || client_id.Value === '' || client_id.Value === 'null') {
        return;
    }

    return client_id.Value;
}

async function saveSpotifyToken(refresh_token) {
    await SAMMI.saveIni(
        'spotify.ini',
        'credentials',
        'refresh_token',
        refresh_token,
    );
}

async function refreshSpotifyToken(refreshToken) {
    const url = "https://accounts.spotify.com/api/token";
    let spotifyClientId = await loadSpotifyClientId();

    if (!spotifyClientId) {
        SAMMI.popUp('No Spotify Client ID found - did you run the setup command?');
        console.error('No Spotify Client ID found');
        return;
    }

    const payload = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: new URLSearchParams({
            grant_type: 'refresh_token',
            refresh_token: refreshToken,
            client_id: spotifyClientId,
        }),
    };

    const response = await fetch(url, payload);
    return await response.json();
}

async function skipSong(access_token) {
    const url = "https://api.spotify.com/v1/me/player/next";
    const headers = {
        "Authorization": `Bearer ${access_token}`,
    };

    const payload = {
        method: 'POST',
        headers: headers,
    };

    return await fetchR(url, payload);
}

async function pauseSong(access_token) {
    const url = "https://api.spotify.com/v1/me/player/pause";
    const headers = {
        "Authorization": `Bearer ${access_token}`,
    };

    const payload = {
        method: 'PUT',
        headers: headers,
    };

    return await fetchR(url, payload);
}

async function getQueue(access_token) { // returns an array of tracks
    const url = "https://api.spotify.com/v1/me/player/queue";
    const headers = {
        "Authorization": `Bearer ${access_token}`,
    };

    const payload = {
        method: 'GET',
        headers: headers,
    };

    const response = await fetchR(url, payload);

    // if the status_code is not 2xx, return null
    if (response.status >= 300) {
        return null;
    }

    const body = await response.json();
    const queue = body.queue;

    if (queue.length === 0) {
        return null;
    }

    return queue;
}

async function getCurrentSong(access_token) {
    const url = "https://api.spotify.com/v1/me/player/currently-playing";
    const headers = {
        "Authorization": `Bearer ${access_token}`,
    };

    const payload = {
        method: 'GET',
        headers: headers,
    };

    const response = await fetchR(url, payload);

    // if the status_code is not 2xx, return null
    if (response.status >= 300) {
        return null;
    }

    const body = await response.json();
    return body.item;
}

async function lookupSong(accessToken, query) {
    const headers = {
        'Authorization': `Bearer ${accessToken}`,
    };

    const query_params = {
        'q': query,
        'type': 'track,artist,album',
    };

    const url = "https://api.spotify.com/v1/search" + '?' + new URLSearchParams(query_params);
    const payload = {
        method: 'GET',
        headers: headers,
    };

    const response = await fetchR(url, payload);

    // if the status_code is not 2xx, return null
    if (response.status >= 300) {
        return null;
    }

    const body = await response.json();
    return body;
}

async function addSong(accessToken, uri) {
    const url = "https://api.spotify.com/v1/me/player/queue?uri=" + uri;
    const headers = {
        'Authorization': `Bearer ${accessToken}`,
    };

    const payload = {
        method: 'POST',
        headers: headers,
    };

    return await fetchR(url, payload);
}

async function resumeSong(accessToken) {
    const url = "https://api.spotify.com/v1/me/player/play";
    const headers = {
        'Authorization': `Bearer ${accessToken}`,
    };

    const payload = {
        method: 'PUT',
        headers: headers,
    };

    return await fetchR(url, payload);
}


async function getTrackInfo(accessToken, trackId) {
    const url = `https://api.spotify.com/v1/tracks/${trackId}`;
    const headers = {
        'Authorization': `Bearer ${accessToken}`,
    };

    const payload = {
        method: 'GET',
        headers: headers,
    };
    
    const response = await fetchR(url, payload);
    return await response.json();
}

async function setPlayerVolume(accessToken, volume) {
    const url = `https://api.spotify.com/v1/me/player/volume?volume_percent=${volume}`;
    const headers = {
        'Authorization': `Bearer ${accessToken}`,
    };

    const payload = {
        method: 'PUT',
        headers: headers,
    };

    return await fetchR(url, payload);
}

async function refreshTokenIntegration(newlyRefreshedToken = null) {
    const refreshToken = newlyRefreshedToken || await loadSpotifyToken()

    if (!refreshToken) {
        SAMMI.popUp(`No refresh token found. Please authenticate with Spotify.`);
        console.error('No refresh token found');
        return;
    }

    const response = await refreshSpotifyToken(refreshToken);

    if (response && response.error) {
        console.error('Error refreshing token', response.error, response.error_description);
        SAMMI.popUp(`Error refreshing token: ${response.error} - ${response.error_description}. Please re-authenticate with Spotify.`);

        // unset the refresh token in the file
        await saveSpotifyToken('');
        return;
    }

    if (!response || !response.access_token) {
        return;
    }

    await SAMMI.setVariable('SPOTIFY_ACCESS_TOKEN', response.access_token);
    await saveSpotifyToken(response.refresh_token || refreshToken);
    return response.access_token;
}

async function onSetRefreshToken(_, payload) {
    await refreshTokenIntegration(
        payload
            .Data
            .refresh_token
            .trim()
    )
}

// integration methods
async function onSkipSong(accessToken, payload) {
    await skipSong(accessToken);
}

async function onRefreshToken(accessToken, payload) {
    await refreshTokenIntegration();
}

async function onPauseSong(accessToken, payload) {
    await pauseSong(accessToken);
}

async function onLookupSong(accessToken, payload) {
    const response = await lookupSong(accessToken, payload.Data.query);
    const tracks = response.tracks.items;

    if (!tracks) {
        await SAMMI.setVariable(
            payload.Data.trackInfo, 
            0,
            payload.Data.FromButton,
            payload.Data.instanceId
        );

        return;
    }
    
    await SAMMI.setVariable(
        payload.Data.trackInfo, 
        trackToSammiTrack(tracks[0]),
        payload.Data.FromButton,
        payload.Data.instanceId
    );
}

async function onAddSong(accessToken, payload) { // todo: this changes
    const query = payload.Data.query;
    let track = null;

    // if the query is a URL
    if (query.startsWith('https') && query.includes('track')) {
        const url = new URL(query);
        
        if (url.hostname === 'open.spotify.com') {
            const path = url.pathname.split('/');

            uri = `spotify:track:${path[path.length - 1]}`;
            track = await getTrackInfo(accessToken, uri);
        }
    }

    if (!track) {
        const response = await lookupSong(accessToken, query);
        const tracks = response.tracks.items;

        if (!tracks) {
            await SAMMI.setVariable(
                payload.Data.trackInfo, 
                0,
                payload.Data.FromButton,
                payload.Data.instanceId
            );

            return;
        }

        track = tracks[0];
    }

    const response = await addSong(accessToken, track.uri);
    const variable = response.status === 204 ? trackToSammiTrack(track) : 0;

    await SAMMI.setVariable(
        payload.Data.trackInfo, 
        variable,
        payload.Data.FromButton,
        payload.Data.instanceId
    );
}

// 
async function onGetQueue(accessToken, payload) {
    const queue = await getQueue(accessToken);

    if (!queue || queue.length === 0) {
        await SAMMI.setVariable(
            payload.Data.trackInfo, 
            0,
            payload.Data.FromButton,
            payload.Data.instanceId
        );

        return;
    }

    await SAMMI.setVariable(
        payload.Data.trackInfo, 
        queue.map(trackToSammiTrack),
        payload.Data.FromButton,
        payload.Data.instanceId
    );
}

async function onResumeSong(accessToken, payload) {
    await resumeSong(accessToken);
}

async function onCurrentSong(accessToken, payload) {
    const track = await getCurrentSong(accessToken);

    if (!track) {
        await SAMMI.setVariable(
            payload.Data.trackInfo, 
            0,
            payload.Data.FromButton,
            payload.Data.instanceId
        );

        return;
    }

    await SAMMI.setVariable(
        payload.Data.trackInfo, 
        trackToSammiTrack(track),
        payload.Data.FromButton,
        payload.Data.instanceId
    );
}

async function onSetVolume(accessToken, payload) {
    const volume = payload.Data.volume;

    // if it's not an integer, convert it to an integer
    if (!Number.isInteger(volume)) {
        payload.Data.volume = parseInt(volume);
    }

    await setPlayerVolume(accessToken, payload.Data.volume);
}

async function onSetClientId(_, payload) {
    await saveSpotifyClientId(
        payload
            .Data
            .client_id
            .trim()
    );
}

async function onGetClientId(_, payload) {
    const clientId = await loadSpotifyClientId();

    if (!clientId) {
        await SAMMI.setVariable(
            payload.Data.client_id,
            "null",
            payload.Data.FromButton,
            payload.Data.instanceId
        );
        
        console.log(`No client id found`)
        return;
    }

    await SAMMI.setVariable(
        payload.Data.client_id,
        clientId,
        payload.Data.FromButton,
        payload.Data.instanceId
    );
}

async function onEvent(event, payload) {
    const integrationMapping = {
        'Spotify Skip Song': onSkipSong,
        'Spotify Refresh Token': onRefreshToken,
        'Spotify Set Refresh Token': onSetRefreshToken,
        'Spotify Pause Song': onPauseSong,
        'Spotify Resume Song': onResumeSong,
        'Spotify Lookup Song': onLookupSong,
        'Spotify Add Song': onAddSong,
        'Spotify Get Queue': onGetQueue,
        'Spotify Current Song': onCurrentSong,
        'Spotify Set Volume': onSetVolume,
        'Spotify Set Client ID': onSetClientId,
        'Spotify Get Client ID': onGetClientId,
    };

    const excludeRefreshTokenEvents = [
        'Spotify Set Refresh Token',
        'Spotify Set Client ID',
        'Spotify Get Client ID'
    ];

    const accessTokenPayload = await SAMMI.getVariable('SPOTIFY_ACCESS_TOKEN');
    let accessToken = accessTokenPayload.Value;
    
    console.log(`Event: ${event}`)
    
    /* Refresh the token _only_ if the event is not 'Spotify Set Refresh Token' */
    if (!accessToken && !excludeRefreshTokenEvents.includes(event)) {
        const accessToken = await refreshTokenIntegration();

        if (!accessToken) {
            SAMMI.popUp('No spotify access token found; this extension will not work without it. Please re-authenticate with Spotify.');
            console.error('No access token found');
            return;
        }
    }

    const fn = integrationMapping[event];

    if (!fn) {
        SAMMI.alert(`No integration method found for event: ${event}`);
        console.error(`No integration method found for event: ${event}`);
        return;
    }

    return await fn(accessToken, payload);
}


// Custom JavaScript for the extension
// Main function to run when SAMMI connects to the Bridge
async function main() {
    const commands = [
        'Spotify Skip Song',
        'Spotify Refresh Token',
        'Spotify Pause Song',
        'Spotify Resume Song',
        'Spotify Get Queue',
        'Spotify Current Song',
        'Spotify Lookup Song',
        'Spotify Add Song',
        'Spotify Set Refresh Token',
        'Spotify Set Volume',
        'Spotify Set Client ID',
        'Spotify Get Client ID',
    ];

    // Register the commands
    for (const command of commands) {
        sammiclient.on(command, async (payload) => await onEvent(command, payload));
    }

    await refreshTokenIntegration();

    // Set a loaded flag to true
    console.log(`Spotify Extension Loaded`)
    SAMMI.setVariable('SPOTIFY_EXTENSION_LOADED', "true");
}

// [insert_hook]

// In this next section below, copy and paste your deck from SAMMI Core (right click on Deck Thumbnail -> Copy Deck)
// At the end, you can add more parameters and conditions under which the extension will install
// Notice we added this particular key to the very end of the deck json: "sammi_version": "2023.3.0" 
// This means the extension will only install if SAMMI version is 2023.3.0 or higher
[insert_over]
{ "deck_data": "{ \"background_color\": 4210752.0, \"on\": true, \"grid_y\": 10.0, \"snap_grid\": 1.0, \"lb_version\": \"2024.1.0\", \"background_image\": \"\", \"sammi_version\": \"2024.1.0\", \"encrypted\": false, \"adaptive_resizing\": 1.0, \"unique_id\": \"20240317151952373525382\", \"button_list\": [ { \"color\": 12632256.0, \"persistent\": 0.0, \"text\": \"Setup\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 0.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"extcmd\": \"Spotify Get Client ID\", \"client_id\": \"existing_client_id\", \"ext\": \"SAMMI Bridge\" }, { \"b1\": \"1500\", \"cmd\": 153.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"existing_client_id\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 1.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 2.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"existing_client_id\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"\\\"null\\\"\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 5.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 141.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMI will now open a window to the Spotify Developer Dashboard - this is where you create and retrieve the client id for your Spotify OAuth application.\", \"v0\": 1.0 }, { \"cmd\": 136.0, \"obsid\": \"Main\", \"pos\": 4.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"https:\\\/\\\/developer.spotify.com\\\/dashboard\" }, { \"b1\": \"\", \"cmd\": 214.0, \"obsid\": \"Main\", \"pos\": 5.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Input Client ID from Spotify Dashboard.\", \"b2\": \"client_id\" }, { \"cmd\": 0.0, \"obsid\": \"Main\", \"pos\": 6.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"extcmd\": \"Spotify Set Client ID\", \"client_id\": \"\\\/$client_id$\\\/\", \"ext\": \"SAMMI Bridge\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 12.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 7.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"client_id\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"\\\"\\\"\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 8.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"client_id\", \"b2\": \"existing_client_id\" }, { \"cmd\": 141.0, \"obsid\": \"Main\", \"pos\": 9.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"SAMMI will now open a window to authorize YOUR Spotify application which allows this extension to control Spotify.\", \"v0\": 1.0 }, { \"cmd\": 136.0, \"obsid\": \"Main\", \"pos\": 10.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"https:\\\/\\\/spotify-token-api-gold.vercel.app\\\/oauth\\\/spotify\\\/extension\\\/redirect?client_id=\\\/$client_id$\\\/\" }, { \"b1\": \"\", \"cmd\": 214.0, \"obsid\": \"Main\", \"pos\": 11.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Input Refresh token from browser.\", \"b2\": \"refresh_token\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 12.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 12.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"refresh_token\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"\\\"\\\"\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"cmd\": 0.0, \"obsid\": \"Main\", \"pos\": 13.0, \"vis\": 1.0, \"refresh_token\": \"\\\/$refresh_token$\\\/\", \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"extcmd\": \"Spotify Set Refresh Token\", \"ext\": \"SAMMI Bridge\" } ], \"press_type\": 0.0, \"x\": 0.29999999999999998889776975374843, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 0.0, \"width\": 0.40000000000000002220446049250313, \"button_id\": \"SPOTIFY_SETUP\", \"button_duration\": 0.0, \"y\": 0.29999999999999998889776975374843, \"switch_deck\": \"\", \"height\": 0.20000000000000001110223024625157, \"release_list\": [ ], \"functions\": 1.0, \"stretch\": 0.0 }, { \"color\": 12632256.0, \"persistent\": 1.0, \"text\": \"Reset Client ID\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"This should only be run if you need to change a client id for (whatever) reason. This will almost never be used. \", \"v0\": 0.0 }, { \"cmd\": 0.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"extcmd\": \"Spotify Set Client ID\", \"client_id\": \"null\", \"ext\": \"SAMMI Bridge\" } ], \"press_type\": 0.0, \"x\": 0.0, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 0.0, \"width\": 0.20000000000000001110223024625157, \"button_id\": \"SPOTIFY_EXTENSION_RESET_CLIENT_ID\", \"button_duration\": 0.0, \"y\": 0.0, \"switch_deck\": \"\", \"height\": 0.20000000000000001110223024625157, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 12632256.0, \"persistent\": 1.0, \"text\": \"Documentation\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 136.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"https:\\\/\\\/github.com\\\/jspaulsen\\\/spotify-extension\" } ], \"press_type\": 0.0, \"x\": 0.80000000000000004440892098500626, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 0.0, \"width\": 0.20000000000000001110223024625157, \"button_id\": \"SPOTIFY_EXTENSION_DOCUMENTS\", \"button_duration\": 0.0, \"y\": 0.0, \"switch_deck\": \"\", \"height\": 0.20000000000000001110223024625157, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 } ], \"deck_name\": \"Spotify Extension\", \"grid_x\": 10.0, \"stretch\": 0.0 }", "unique_id": "20240317151952373525382", "include_image": { } }
